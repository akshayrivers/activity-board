// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  rollNumber    String   @unique
  name          String
  email         String?
  passwordHash  String
  profilePicUrl String?
  isVerified    Boolean  @default(false)
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  activities          Activity[]
  verificationRequest VerificationRequest?
  likes               Like[]
  comments            Comment[]
  joinRequests        JoinRequest[]
  reports             Report[]
  adminApprovals      VerificationRequest[] @relation("AdminApprovals")

  @@index([rollNumber])
  @@map("users")
}

model VerificationRequest {
  id         String                    @id @default(cuid())
  userId     String                    @unique
  idImageUrl String
  status     VerificationRequestStatus @default(PENDING)
  adminId    String?
  note       String?
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin User? @relation("AdminApprovals", fields: [adminId], references: [id])

  @@map("verification_requests")
}

model Activity {
  id              String        @id @default(cuid())
  authorId        String
  title           String
  description     String
  type            ActivityType
  genre           ActivityGenre
  location        String?
  startDate       DateTime?
  endDate         DateTime?
  frequency       Frequency
  capacity        Int?
  joinedCount     Int           @default(0)
  fundingGoal     Int?
  applicationForm Json?
  templatesUsed   Json?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  author       User          @relation(fields: [authorId], references: [id])
  likes        Like[]
  comments     Comment[]
  joinRequests JoinRequest[]
  reports      Report[]

  @@map("activities")
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
  @@map("likes")
}

model Comment {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  text       String
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model JoinRequest {
  id         String            @id @default(cuid())
  userId     String
  activityId String
  status     JoinRequestStatus @default(REQUESTED)
  createdAt  DateTime          @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
  @@map("join_requests")
}

model Report {
  id         String       @id @default(cuid())
  reporterId String
  activityId String
  reason     String
  createdAt  DateTime     @default(now())
  handledAt  DateTime?
  status     ReportStatus @default(OPEN)
  adminNote  String?

  // Relations
  reporter User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Enums
enum VerificationRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ActivityType {
  OPEN
  COMMUNITY
  COLLEGE_FUNDED
}

enum ActivityGenre {
  TECH
  ART
  MUSIC
  DANCE
  SPORTS
  OTHER
}

enum Frequency {
  ONE_OFF
  WEEKLY
  FORTNIGHTLY
  MONTHLY
  ON_DEMAND
}

enum JoinRequestStatus {
  REQUESTED
  CONFIRMED
  CANCELLED
}

enum ReportStatus {
  OPEN
  RESOLVED
  DISMISSED
}
